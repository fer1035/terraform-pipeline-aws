name: Terraform-Packer

on:
  workflow_call:
    inputs:
      enviro:
        required: true
        type: string
      launch_type:
        required: true
        type: string
      family:
        required: true
        type: string
      default_tag:
        required: true
        type: string
    secrets:
      TF_API_TOKEN:
        required: true
      TF_GITHUB_TOKEN:
        required: true

env:
  VARIABLES_FILE: terraform/packer/modules/container/variables.tf

jobs:
  terraform:
    name: Terraform-Packer
    runs-on: ubuntu-latest
    environment: ${{ inputs.enviro }}
    defaults:
      run:
        working-directory: ./terraform/packer
    steps:

      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Update Terraform Variables
        id: terraform-variables
        run: |
          sed -i 's|LAUNCH_TYPE|${{ inputs.launch_type }}|g' $VARIABLES_FILE
          sed -i 's|DEFAULT_TAG|${{ inputs.default_tag }}|g' $VARIABLES_FILE
          sed -i 's|FAMILY|${{ inputs.family }}|g' $VARIABLES_FILE

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@0.9.0
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.TF_GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        run: terraform apply -auto-approve
